
pip install tensorflow keras
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout,BatchNormalization
from keras.optimizers  import Adam,RMSprop


train_dir=r'C:\genai_with_gemini\emo_traine\emo_train'
test_dir=r'C:\genai_with_gemini\emo_teste\emo_test'

# Data Augmentation

train_data = ImageDataGenerator(rescale=1./255
)
test_data = ImageDataGenerator(rescale=1./255)

# Load train and test data
train = train_data.flow_from_directory(train_dir, target_size=(48, 48), batch_size=32, class_mode='categorical', color_mode='grayscale')
test = test_data.flow_from_directory(test_dir, target_size=(48, 48), batch_size=32, class_mode='categorical', color_mode='grayscale')
print(train[0][0].shape)

# Define the CNN model
model = Sequential()

# 1st Convolutional Layer
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))

# 2nd Convolutional Layer
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# 3rd Convolutional Layer
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(256, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))




# Flatten the output from the convolutional layers
model.add(Flatten())

# Fully Connected Dense Layer
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))


# Output Layer for 7 classes (emotion categories)
model.add(Dense(7, activation='softmax'))

# Compile the model
model.compile(optimizer=RMSprop(learning_rate=1e-3),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Model summary
model.summary()
model.fit(train,epochs=20)
model.save(emotion_model.h5)
